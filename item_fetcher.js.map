{"version":3,"sources":["item_fetcher.js"],"names":["xmlRegexp","parseHistory","xml","match","map","eventXML","result","event","exec","key","value","split","replace","onmessage","data","startDate","endDate","console","log","fetch","then","response","text","items","postMessage","sort","Math","random","slice"],"mappings":";AAqEA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAxCA,IAAMA,EAAY,8BACZC,EAAe,SAAAC,GACnBA,OAAAA,EAAIC,MAAM,iCACPC,IAAI,SAAAC,GAWGC,IAVAC,IAQFD,EAREC,EAAQ,GAURD,EAASN,EAAUQ,KAAKH,IAAW,CACRC,IADQ,EAAA,EACRA,EADQ,GACvBG,GADuB,EAAA,GAAA,EAAA,IAClBC,EACrB,EAAA,GACY,SAARD,GACFF,EAAaE,OAAAA,OAAAA,IAASC,EACtBH,EAAME,GAAOC,EAAMC,MAAM,MACR,gBAARF,GACTF,EAAaE,OAAAA,OAAAA,IAASC,EACtBH,EAAME,GAAOC,EACVE,QAAQ,yBAA0B,MAClCA,QAAQ,OAAQ,IAChBA,QAAQ,WAAY,UACpBA,QAAQ,eAAgB,WACxBA,QAAQ,WAAY,UAGpBA,QAAQ,mBAAoB,IAC5BA,QAAQ,+BAAgC,QACxCA,QAAQ,kCAAmC,KAE9CL,EAAME,GAAOC,EAGVH,OAAAA,KAGbM,UAAY,SAA2C,GAAA,IAAA,EAAA,KAAhCC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,UAAWC,EAAAA,EAAAA,QAExCC,QAAQC,IAAI,CAAEH,UAAAA,EAAWC,QAAAA,IAGzBG,MAAM,gBACHC,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAI1BF,KAAK,SAAAlB,GACEqB,IAAAA,EAAQtB,EAAaC,GAC3B,EAAKsB,YAAY,CAAED,MAAOA,EAAME,KAAK,WAAMC,OAAAA,KAAKC,SAAW,KAAKC,OAAO","file":"item_fetcher.js","sourceRoot":"..","sourcesContent":["// import timeline from './family_timeline.json';\n// onmessage = function(_event) {\n//   postMessage({ items: timeline });\n// };\n\n// console.log({ timeline });\n\n// useEffect(() => {\n//   const response =\n//     fetch(`http://www.vizgr.org/historical-events/search.php?begin_date=${range[0].toISOString().slice(0, 10).replace(/-/g, '')}&end_date=${range[1].toISOString().slice(0, 10).replace(/-/g, '')}`)\n//     .then(response => response.text())\n//     .then(xml => {\n//       const oParser = new DOMParser();\n//       const xmlDOM = oParser.parseFromString(xml, \"application/xml\");\n//       console.log('xmlDOM', window.xmlDOM = xmlDOM);\n  \n//       const events = xmlDOM.documentElement.querySelectorAll(':root > event');\n//       const items = [...events]\n//         .map(node => Object.fromEntries(\n//           [...node.childNodes]\n//             .map(child => [child.nodeName, child.textContent])\n//         ));\n//       setItems(items);\n//     });\n// }, [ range, setItems ]);\n\n// let timer;\n\n// const xmlRegexp = /(?<=<([^/].*?)>)(.*)(?=<\\/\\1>)/g;\nconst xmlRegexp = /<([^/].*?)>(.*)(?=<\\/\\1>)/g;\nconst parseHistory = xml =>\n  xml.match(/(?<=<event>).*?(?=<\\/event>)/g)\n    .map(eventXML => {\n      const event = {};\n      // eventXML.split(/(?<=<\\/.*?>)(?=<)/)\n      //   .forEach(xml => {\n      //     const [ _match, name, value ] = xml.match(/<(.*?)>(.*)<\\/.*?>/);\n      //     event[name] = value;\n      //   });\n\n      // var reg = /e(.*?)e/g;\n      let result;\n      // eslint-disable-next-line no-cond-assign\n      while(result = xmlRegexp.exec(eventXML)) {\n        const [ _match, key, value ] = result;\n        // console.log('result', result);\n        if (key === 'date') {\n          event[`orig${key}`] = value;\n          event[key] = value.split('/');\n        } else if (key === 'description') {\n          event[`orig${key}`] = value;\n          event[key] = value\n            .replace(/^<!\\[CDATA\\[(.*)\\]\\]>$/, '$1')\n            .replace(/^\\s+/, '')\n            .replace(/ampnbsp/g, '&nbsp;')\n            .replace(/ampampndash/g, '&ndash;')\n            .replace(/ampquot/g, '&quot;')\n            // ampref name=ampquotyadvashemampquot/amp\n            // ampref name=ampquotlameretlesmusulmansampquotampPicard C. (1997) ''La mer et les musulmans d'Occident au Moyen Age''. Paris: Presses Universitaires de France, pp.73ampamp\n            .replace(/ampref .*?\\/amp/g, '')\n            .replace(/{{convert|(.*?)|(.*?)|.*?}}/g, '$1$2') // {{convert|600|ft|m|sing=on}}\n            .replace(/(ampamp)?{{cite .*?}}(ampamp)?/g, '');\n        } else {\n          event[key] = value;\n        }\n      }\n      return event;\n    });\n\nonmessage = function({ data: { startDate, endDate } }) {\n\n  console.log({ startDate, endDate });\n  // &limit=100&related=true\n  // fetch(`http://www.vizgr.org/historical-events/search.php?begin_date=${startDate ? startDate.toArgs().slice(0,3).join('') : '20000101'}&end_date=${endDate ? endDate.toArgs().slice(0,3).join('') : '20001231'}`)\n  fetch('/history.xml')\n    .then(response => response.text())\n    // .then(parseHistory)\n    // .then(items => {\n    //   debugger;\n    .then(xml => {\n      const items = parseHistory(xml);\n      this.postMessage({ items: items.sort(() => Math.random() - 0.5).slice(-100) })\n    });\n    // .then(events => {\n    //   debugger;\n    //   const oParser = new DOMParser();\n    //   const xmlDOM = oParser.parseFromString(xml, \"application/xml\");\n    //   // console.log('xmlDOM', window.xmlDOM = xmlDOM);\n    \n    //   const events = xmlDOM.documentElement.querySelectorAll(':root > event');\n    //   const items = [...events]\n    //     .map(node => Object.fromEntries(\n    //       [...node.childNodes]\n    //         .map(child => [child.nodeName, child.textContent])\n    //     ));\n    //   // setItems(items);\n    \n    //   // postMessage({ items: timeline });\n    //   postMessage({ items });\n    // });\n}"]}